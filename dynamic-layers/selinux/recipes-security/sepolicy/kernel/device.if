# Copyright (c) 2023 Qualcomm Innovation Center, Inc. All rights reserved.
# SPDX-License-Identifier: BSD-3-Clause-Clear

## <summary>
## Device nodes and interfaces for many basic system devices.
## </summary>
## <desc>
## <p>
## This module creates the device node concept and provides
## the policy for many of the device files. Notable exceptions are
## the mass storage and terminal devices that are covered by other
## modules.
## </p>
## <p>
## This module creates the concept of a device node. That is a
## char or block device file, usually in /dev. All types that
## are used to label device nodes should use the dev_node macro.
## </p>
## <p>
## Additionally, this module controls access to three things:
##	<ul>
##		<li>the device directories containing device nodes</li>
##		<li>device nodes as a group</li>
##		<li>individual access to specific device nodes covered by
##		this module.</li>
##	</ul>
## </p>
## </desc>
## <required val="true">
##	Depended on by other required modules.
## </required>

#####################
## <summary>
## Allow allocation of buffer from qseecom heap
## </summary>
## <param name="domain">
##  <summary>
##  Domain allowed to rw /dev/dma_heap/qseecom*
##  heaps
##  </summary>
## </param>
#

interface(`qcom_qseecom_alloc_buf_rw',`
        gen_require(`
                type qcom_qseecom_heap_dev_t;
        ')

        allow $1 qcom_qseecom_heap_dev_t:chr_file rw_chr_file_perms;
')

#####################
## <summary>
## Allow open/read/write from smcinvoke device
## </summary>
## <param name="domain">
##  <summary>
##  Domain allowed rw to smcinvoke device
##  to communicate with trustzone
##  </summary>
## </param>
#

interface(`qcom_allow_smcinvoke_rw',`
        gen_require(`
                type qcom_smcinvoke_dev_t;
        ')

        allow $1 qcom_smcinvoke_dev_t:chr_file rw_chr_file_perms;
')

#####################
## <summary>
## Allow open/read/write from ufs-bsg device
## </summary>
## <param name="domain">
##  <summary>
##  Domain allowed rw to ufs-bsg0 device
##  </summary>
## </param>
#

interface(`qcom_allow_ufs_bsg_rw',`
       gen_require(`
               type qcom_ufs_bsg_dev_t;
       ')

       allow $1 qcom_ufs_bsg_dev_t:chr_file rw_chr_file_perms;
')
